import{isString,isFunction}from"lodash";import EventEmitter from"events";import Promise from"bluebird";const symbolLift=Symbol("_lift"),SymbolCheckMiddleware=Symbol("_checkMiddleware");process.on("uncaughtException",e=>{console.error("uncaughtException:",e),process.exit(1)}),process.on("unhandledRejection",(e,i)=>{console.log("Unhandled Rejection at:",i,"reason:",e),process.exit(1)});class Ofa2 extends EventEmitter{constructor(e,i){if(super(),this.options=i||{},this.middlewares=[],!e)throw new Error("need projectPath param");this.projectPath=e,this.init()}init(){this.environment=(process.env.NODE_ENV||"development").trim(),this.promise=Promise.resolve(),this.config={},this.model={},this.global={},this.graphql={},this.options.alias?global[this.options.alias]=this:global.framework=this,global.logger=console,global.logger.trace=global.logger.log,global.logger.debug=global.logger.log}use(e){let i;if(isFunction(e))i=e;else{if(!isString(e))throw new Error("middleware should be string or function");try{i=require(`ofa2-${e}`)}catch(e){console.warn(e),process.exit(1)}}return this.middlewares.push(i.default?i.default:i),this}async[SymbolCheckMiddleware](e){await Promise.each(this.middlewares,i=>{if(isFunction(i[e]))return i[e].call(this)}),this.emit(`${e}ed`)}async[symbolLift](){await Promise.each(this.middlewares,e=>isFunction(e)?e.call(this):isFunction(e.lift)?e.lift.call(this):void 0),this.emit("lifted")}lift(){return this.promise=this.promise.then(()=>{this[symbolLift]()}),this}listen(){return this.promise=this.promise.then(()=>this[SymbolCheckMiddleware]("listen")),this}lower(){return this.promise=this.promise.then(()=>this[SymbolCheckMiddleware]("lower")),this}}export default Ofa2;
//# sourceMappingURL=bundle.esm.js.map
